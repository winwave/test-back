# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/v1/users", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Api::V1::User. As you add validations to Api::V1::User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { pseudo: 'AAA' }
  }

  let(:invalid_attributes) {
    { pseudo: 'Aaa' }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # Api::V1::UsersController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "renders a successful response" do
      User.create!(pseudo: 'AAA', decimal_index: 703)
      get api_v1_users_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      context "with the user is not exist " do
        it "creates a new User" do
          expect {
            post api_v1_users_url,
                 params: { user: valid_attributes }, headers: valid_headers, as: :json
          }.to change(User, :count).by(1)
        end

        it "renders a JSON response with the new user" do
          post api_v1_users_url,
               params: { user: valid_attributes }, headers: valid_headers, as: :json
          expect(response).to have_http_status(:created)
          expect(response.content_type).to match(a_string_including("application/json"))
        end

        it "renders the right message in JSON response" do
          post api_v1_users_url,
               params: { user: valid_attributes }, headers: valid_headers, as: :json
          expect(body_as_json).to match("message" => "your registration with pseudo AAA is now complete",)
        end
      end
      context "with the user has been exist " do
        before do
          User.create!(pseudo: 'AAA', decimal_index: 703)
        end
        it "creates a new User" do
          expect {
            post api_v1_users_url,
                 params: { user: valid_attributes }, headers: valid_headers, as: :json
          }.to change(User, :count).by(1)
        end

        it "renders a JSON response with the new user" do
          post api_v1_users_url,
               params: { user: valid_attributes }, headers: valid_headers, as: :json
          expect(response).to have_http_status(:created)
          expect(response.content_type).to match(a_string_including("application/json"))
        end

        it "renders the message question with new pseudo in JSON response" do
          post api_v1_users_url,
               params: { user: valid_attributes }, headers: valid_headers, as: :json
          expect(body_as_json).to match("message" => "The AAA was exists but your registration is also complete with pseudo AAB. Do you want to modify that ?")
        end
      end
    end

    context "with invalid parameters" do
      it "does not create a new User" do
        expect {
          post api_v1_users_url,
               params: { user: invalid_attributes }, as: :json
        }.to change(User, :count).by(0)
      end

      it "renders a JSON response with errors" do
        post api_v1_users_url,
             params: { user: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
      end

      it "renders a Bad format of pseudo message" do
        post api_v1_users_url,
             params: { user: invalid_attributes }, headers: valid_headers, as: :json
        expect(body_as_json).to match("message" => "Bad format of pseudo")
      end
    end
  end
end
